// This file was generated by counterfeiter
package fakes

import (
	"bufio"
	"net"
	"net/http"
	"sync"
)

type FakeHijacker struct {
	HijackStub        func() (net.Conn, *bufio.ReadWriter, error)
	hijackMutex       sync.RWMutex
	hijackArgsForCall []struct{}
	hijackReturns     struct {
		result1 net.Conn
		result2 *bufio.ReadWriter
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHijacker) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	fake.hijackMutex.Lock()
	fake.hijackArgsForCall = append(fake.hijackArgsForCall, struct{}{})
	fake.recordInvocation("Hijack", []interface{}{})
	fake.hijackMutex.Unlock()
	if fake.HijackStub != nil {
		return fake.HijackStub()
	} else {
		return fake.hijackReturns.result1, fake.hijackReturns.result2, fake.hijackReturns.result3
	}
}

func (fake *FakeHijacker) HijackCallCount() int {
	fake.hijackMutex.RLock()
	defer fake.hijackMutex.RUnlock()
	return len(fake.hijackArgsForCall)
}

func (fake *FakeHijacker) HijackReturns(result1 net.Conn, result2 *bufio.ReadWriter, result3 error) {
	fake.HijackStub = nil
	fake.hijackReturns = struct {
		result1 net.Conn
		result2 *bufio.ReadWriter
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeHijacker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hijackMutex.RLock()
	defer fake.hijackMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHijacker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.Hijacker = new(FakeHijacker)
